1.
#include<bits/stdc++.h>
using namespace std;

void DFS(int node,int destination,vector<int> &vis,vector<int> adj[],vector<int> &storedfs,int &flag)
{
    storedfs.push_back(node);
    vis[node]=1;
    for (auto it: adj[node])
    {
        if (!vis[it])
        {
            if (it==destination) flag=1;
            DFS(it,destination,vis,adj,storedfs,flag);
        }
         
    }
}
int main()
{
    int n,m;         //n=no of edges, m= no of lines of edges 
    cout<<"enter n and m"<<endl;
    cin>>n>>m;
    vector<int> adj[n+1];
    cout<<"enter the nodes between there is edge"<<endl;
    for (int i=1;i<=m;i++)
    {
        int u,v;          //ex:- (2,3) is one line which mens there is a edge beetween 2 and 3
        cin>>u>>v;
        adj[u].push_back(v);
        adj[v].push_back(u);
    }
    int source,destination;
    cout<<"Enter the source and Destination node"<<endl;
    cin>>source>>destination;
    vector<int> storedfs;
    vector<int> vis(n+1,0);
    int flag=0;
    DFS(source,destination,vis,adj,storedfs,flag);
    for (int i=0;i<storedfs.size();i++)
       cout<<storedfs[i]<<" ";
       cout<<endl;

    if (flag)
       cout<<"Yes Path exists"<<endl;
    else
       cout<<"No Such Path exists"<<endl;

    return 0;
}

2.
#include <bits/stdc++.h>
using namespace std;

bool bfs(vector<int> adj[],int src, vector<int> &color,int n)
{
    queue<int> q;
    q.push(src);
    color[src]=1;
    while (!q.empty())
    {
        int node=q.front();
        q.pop();
        for (auto it:adj[node])
        {
            if (color[it]==-1)
            {
                color[it]=1-color[node];
                q.push(it);
            }
            else if (color[it]==color[node])
               return false;
        }
    }
    return true;
}

int main()
{
    cout<<"Enter the number of vertices and edges"<<endl;
    int n,m;
    cin>>n>>m;
    vector<int> adj[n+1];
    cout<<"enter the nodes between there is edge"<<endl;
    for (int i=0;i<m;i++)
    {
        int a,b;
        cin>>a>>b;
        adj[a].push_back(b);
        adj[b].push_back(a);
    }

    vector<int> color(n+1,-1);
    if (bfs(adj,1,color,n))
        cout<<"Yes Barpitite"<<endl;
    else
        cout<<"Not Barpitite"<<endl;
        return 0;
    
}

3.
#include<bits/stdc++.h>
using namespace std;

//Directedgraph using adjancency list O(n)
bool CheckCycle(int node,vector<int> adj[],int vis[],int dfsvis[])
{
    vis[node]=1;
    dfsvis[node]=1;
    for (auto it: adj[node])
    {
        if (!vis[it])
        {
           if (CheckCycle(it,adj,vis,dfsvis))
                return true;
        }
        else if (dfsvis[it])
           return true;
    }
    dfsvis[node]=0;
    return false;
}
bool isCycle(vector<int> adj[],int N)
{
    
    int vis[N+1],dfsVis[N+1];
    memset(vis,0,sizeof(vis));
    memset(dfsVis,0,sizeof(dfsVis));
    for (int i=1;i<=N;i++)
    {
        if (!vis[i])
        {
            if (CheckCycle(i,adj,vis,dfsVis))
               return true;
        }
    }
    return false;
}
int main()
{
    int n,m;         //n=no of Vertices, m= no of lines of edges 
    cout<<"enter n and m"<<endl;
    cin>>n>>m;
    vector<int> adj[n+1];
    
     cout<<"enter the nodes between there is edge"<<endl;
    for (int i=1;i<=m;i++)
    {
        int u,v;          //ex:- (2,3) is one line which mens there is a edge beetween 2 and 3
        cin>>u>>v;
        adj[u].push_back(v);
    }

    if (isCycle(adj,n))
        cout<<"Cycle Detected"<<endl;
    else
        cout<<"Cycle Not Detected"<<endl;
    return 0;
}
