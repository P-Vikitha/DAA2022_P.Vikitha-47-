1.
#include<bits/stdc++.h>
using namespace std;

static bool sortbysec(const pair<int,int> &a, const pair<int,int> &b)
   {
    return (a.second < b.second);
   }
    //Function to find the maximum number of meetings that can
    //be performed in a meeting room.
    int maxMeetings(int start[], int end[], int n)
    {
        vector<pair<int, int> > vec(n);
        for(int i=0; i<n; i++) 
        {
            vec[i]=make_pair(start[i],end[i]);
        }
        
        sort(vec.begin(), vec.end(), sortbysec);
        
        int ans=1;
        int last_end=vec[0].second;
        cout<<"("<<vec[0].first<<","<<vec[0].second<<")"<<endl;
        for (int i=1;i<n;i++)
        {
            if (vec[i].first>=last_end)
            {
                ans++;
                last_end=vec[i].second;
                cout<<"("<<vec[i].first<<","<<vec[i].second<<")"<<endl;
            }
        }
        return ans;
    }

int main()
{
    int n;
    cout<<"Enter the n:";
    cin>>n;
    cout<<"Enter the n start time:"<<endl;
    int start[n];
    for (int i=0;i<n;i++)
        cin>>start[i];
    cout<<"Enter the n end time:"<<endl;
    int end[n];
    for (int i=0;i<n;i++)
        cin>>end[i];

    cout<<maxMeetings(start,end,n)<<endl;    
}

2.
#include<bits/stdc++.h>
using namespace std;

 static bool sortbyfirst(pair<int,int> &p1,pair<int,int> &p2)
 {
     return p1.first<p2.first;
 }
 int JobScheduling(int start[],int dead[], int n) 
    { 
        vector<pair<int, int> > vec(n);
        for(int i=0; i<n; i++) 
        {
            vec[i]=make_pair(start[i],dead[i]);
        }
        
        sort(vec.begin(), vec.end(), sortbyfirst);
        int maxi=vec[0].second;
        for (int i=0;i<n;i++)
            maxi=max(maxi,vec[i].second);
            
        int temp[maxi+1];
        for (int i=1;i<=maxi;i++)
           temp[i]=-1;
           
        int jobs=0;
        
        for (int i=0;i<n;i++)
        {
            for (int j=vec[i].second;j>0;j--)
            {
                if (temp[j]==-1)
                {
                    int x=j,count=0;
                    while (x>0 && temp[x]==-1)
                    {
                        x--;
                        count++;
                    }
                    if (count>=vec[i].first)
                    {
                        int count2=vec[i].first,x2=j;
                        while (count2--)
                        {
                            temp[j]=vec[i].first;
                            x2--;
                        }
                        jobs++;
                        break;
                    }
                }
            }
        }
     return jobs;
    } 

int main()
{
    int n;
    cout<<"Enter the n:";
    cin>>n;
    cout<<"Enter the n  time:"<<endl;
    int start[n];
    for (int i=0;i<n;i++)
        cin>>start[i];
    cout<<"Enter the n deadlines:"<<endl;
    int dead[n];
    for (int i=0;i<n;i++)
        cin>>dead[i];

    
    cout<<JobScheduling(start,dead,n);
    
}

3.
#include<bits/stdc++.h>
using namespace std;

 bool majorityElement(vector<int>& nums)
   {
        if (nums.size()==1)
            return nums[0];
        sort(nums.begin(),nums.end());
        int count=1;
        for (int i=0;i<nums.size()-1;i++)
        {
            if (nums[i]==nums[i+1])
            {
                count++;
                if (count>nums.size()/2)
                    return true;
            }
            else
                count=1;
        }
     return false;   

    }
int main()
{
    int n;
    cout<<"Enter the n:";
    cin>>n;
    cout<<"Enter the n numbers:"<<endl;
    vector<int> nums(n,0);
    for (int i=0;i<n;i++)
        cin>>nums[i];
    if (majorityElement(nums))
       cout<<"Yes"<<endl;
    else
       cout<<"No"<<endl;

    if (n%2!=0)
        cout<<nums[n/2]<<endl;
    else{
        double x=(nums[n/2]+nums[n/2-1])/2.0;
        cout<<x<<endl;
    }
}
