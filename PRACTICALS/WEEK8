1.
#include <bits/stdc++.h>
using namespace std;

void Dijkastras(vector<pair<int,int>> adj[],int n,int src)
{
    priority_queue<pair<int,int>,vector<pair<int,int>>,greater<pair<int,int>>> pq;
    vector<int> dist(n+1,INT_MAX);
    vector<int> parent(n+1,0);
    dist[src]=0;
    parent[src]=src;
    
    pq.push({0,src});
    
    while (!pq.empty())
    {
        int node=pq.top().second;
        pq.pop();
        
        for (auto it:adj[node])
        {
            if (dist[node]+it.second<dist[it.first])
            {
                parent[it.first]=node;
                dist[it.first]=dist[node]+it.second;
                pq.push({dist[it.first],it.first});
            }
        }
    }
    
    cout<<"shortest paths"<<endl;
    for (int i=1;i<n+1;i++)
    {
        cout<<i<<",";
        int j=i;
        while (parent[j]!=1)
        {
            j=parent[j];
            cout<<j<<",";
        }
        if (i!=1) cout<<1<<",";
        cout<<":"<<dist[i]<<endl;
    }
}

int main()
{
    int n,m;
    cout<<"enter the number of nodes and edges:";
    cin>>n>>m;
    vector<pair<int,int>> adj[n+1];
    cout<<"enter the source node,target node and weight:"<<endl;
    for (int i=0;i<m;i++)
    {
        int a,b,wt;   
        cin>>a>>b>>wt;
        adj[a].push_back({b,wt});
        adj[b].push_back({a,wt});
    }
    
    Dijkastras(adj,n,1);
    return 0;
}

2.
#include<bits/stdc++.h>
using namespace std;
struct node {
    int u;
    int v;
    int wt; 
    node(int first, int second, int weight) {
        u = first;
        v = second;
        wt = weight;
    }
};

void bellman_ford(vector<node> edges,int n,int src)
{
    vector<int> dist(n,10000000);
    vector<int> parent(n,0);
    dist[src]=0;
    parent[src]=src;
    for (int i=0;i<n-1;i++)
    {
        for (auto it:edges)
        {
            if (dist[it.u]+it.wt<dist[it.v])
            {
               dist[it.v]=dist[it.u]+it.wt;
               parent[it.v]=it.u;
            }   
        }
    }

    int flag=0;
    for (auto it:edges)
    {
        if (dist[it.u]+it.wt<dist[it.v])
        {
            cout<<"Negative Cycles"<<endl;
            flag=1;
            break;
        }
    }
    if (flag==0)
    {
        cout<<"shortest paths"<<endl;
        for (int i=0;i<n;i++)
        {
           cout<<i<<",";
           int j=i;
           while (parent[j]!=0)
           {
               j=parent[j];
               cout<<j<<",";
           }
           if (i!=0) cout<<0<<",";
           cout<<":"<<dist[i]<<endl;
        }
    }
}

int main()
{
    int N,m;
	cin>>N>>m;
	vector<pair<int,int>> adj[N];
	cout<<"enter the edge and its weight"<<endl;
	for (int i=0;i<m;i++)
	{
		int a,b,wt;
		cin>>a>>b>>wt;
		adj[a].push_back({b,wt});
	}
	vector<node> edges; 
	
	//converting adjacency list to the easy edge structure
    for (int i=0;i<N;i++)
	{
		for (auto it:adj[i])
		{
			edges.push_back(node(i,it.first,it.second));
		}
	}
    int src;
    cout<<"Enter Source Node:";
    cin>>src;
    bellman_ford(edges,N,src);
}

3.
#include <bits/stdc++.h>
using namespace std;
 
#define INF INT_MAX


int shortestPath(vector<vector<int>> &graph, int u, int v, int k,int n)
{
   if (k == 0 && u == v)             return 0;
   if (k == 1 && graph[u][v] != INF) return graph[u][v];
   if (k <= 0)                       return INF;
 
   int res = INF;
 
   for (int i = 0; i < n; i++)
   {
       if (graph[u][i] != INF && u != i && v != i)
       {
           int rec_res = shortestPath(graph, i, v, k-1,n);
           if (rec_res != INF)
              res = min(res,graph[u][i] + rec_res);
       }
   }
   return res;
}
 
int main()
{
    int n,m;
    cout<<"enter the number of nodes and edges:"<<endl;
    cin>>n>>m;
    vector<vector<int>> graph(n+1,vector<int> (n+1,INF));
    for (int i=0;i<m;i++)
    {
        int a,b,wt;
        cout<<"enter the node,edge and weight:";
        cin>>a>>b>>wt;
        graph[a][b]=wt;
    }
    for (int i=1;i<=n;i++)
        graph[i][i]=0;
    int u,v,k;
    cout<<"Enter the source, destination and k:"<<endl;
    cin>>u>>v>>k;
    cout << "Weight of the shortest path is "<<
          shortestPath(graph, u, v, k,n);
    return 0;
}
